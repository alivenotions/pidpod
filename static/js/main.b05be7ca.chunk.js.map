{"version":3,"sources":["utils/rssParser.js","components/Header/Header.js","utils/toastNotifs.js","components/Library/Library.js","components/App.js","registerServiceWorker.js","index.js"],"names":["rssParser","Header","state","rssUrlValue","onAddPodcastSubmit","event","preventDefault","_this","props","addPodcast","setState","handleRSSValueChange","target","value","react_default","a","createElement","this","title","className","placeholder","type","onChange","onClick","disabled","Component","TOP_CENTER_POSITION","position","toast","POSITION","TOP_CENTER","notify","msg","notifyError","error","getRSSParser","_","RSSParser","Library","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidUpdate","prevProps","rssUrl","addPodcastRSSFeedFromUrl","parseURL","then","feed","podcastFeeds","toConsumableArray","concat","catch","react","heading","React","App","lastRSSUrl","setLastRSSUrl","url","components_Header_Header","components_Library_Library","lib","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","src_components_App","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kLAGIA,6ECwCWC,0NAtCbC,MAAQ,CACNC,YAAa,MAGfC,mBAAqB,SAAAC,GACnBA,EAAMC,iBACNC,EAAKC,MAAMC,WAAWF,EAAKL,MAAMC,aACjCI,EAAKG,SAAS,CAAEP,YAAa,QAG/BQ,qBAAuB,SAAAN,GACrBE,EAAKG,SAAS,CAAEP,YAAaE,EAAMO,OAAOC,iFAI1C,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAKC,KAAKT,MAAMU,OAChBJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eACbL,EAAAC,EAAAC,cAAA,SACEI,YAAY,eACZC,KAAK,OACLR,MAAOI,KAAKf,MAAMC,YAClBmB,SAAUL,KAAKN,uBAEjBG,EAAAC,EAAAC,cAAA,UACEK,KAAK,SACLE,QAASN,KAAKb,mBACdoB,UAAWP,KAAKf,MAAMC,aAHxB,cA1BWsB,sBCFfC,EAAsB,CAC1BC,SAAUC,QAAMC,SAASC,YAGdC,EAAS,SAAAC,GAAG,OAAIJ,gBAAMI,EAAKN,IAE3BO,EAAc,SAAAD,GAAG,OAAIJ,QAAMM,MAAMF,EAAKN,IFJtCS,SAAe,SAAAC,GAAC,OACzBpC,IAAyBA,EAAY,IAAIqC,aG4B9BC,cA5Bb,SAAAA,EAAY9B,GAAO,IAAAD,EAAA,OAAAgC,OAAAC,EAAA,EAAAD,CAAAtB,KAAAqB,IACjB/B,EAAAgC,OAAAE,EAAA,EAAAF,CAAAtB,KAAAsB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA1B,KAAMT,KAMRoC,mBAAqB,SAAAC,GACftC,EAAKC,MAAMsC,SAAWD,EAAUC,QAClCvC,EAAKwC,yBAAyBxC,EAAKC,MAAMsC,SAT1BvC,EAanBwC,yBAA2B,SAAAD,GACzBX,IACGa,SAASF,GACTG,KAAK,SAAAC,GACJ3C,EAAKG,SAAS,CAAEyC,aAAaZ,OAAAa,EAAA,EAAAb,CAAKhC,EAAKL,MAAMiD,cAAjBE,OAAA,CAA+BH,MAC3DnB,EAAO,+CAERuB,MAAM,SAAAlB,GAAC,OAAIH,EAAY,iCAlB1B1B,EAAKL,MAAQ,CACXiD,aAAc,IAHC5C,wEAwBjB,OAAOO,EAAAC,EAAAC,cAACuC,EAAA,SAAD,KAAWtC,KAAKT,MAAMgD,gBAzBXC,IAAMhC,WCwBbiC,oNAnBbxD,MAAQ,CACNyD,WAAY,MAGdC,cAAgB,SAAAC,GACdtD,EAAKG,SAAS,CAAEiD,WAAYE,6EAI5B,OACE/C,EAAAC,EAAAC,cAACuC,EAAA,SAAD,KACEzC,EAAAC,EAAAC,cAAC8C,EAAD,CAAQ5C,MAAM,SAAST,WAAYQ,KAAK2C,gBACxC9C,EAAAC,EAAAC,cAAC+C,EAAD,CAASP,QAAQ,cAAcV,OAAQ7B,KAAKf,MAAMyD,aAClD7C,EAAAC,EAAAC,cAACgD,EAAA,eAAD,cAdUvC,cCEZwC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTvB,KAAK,SAAA2B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5E,QACfuE,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrB7B,MAAM,SAAApB,GACLgD,QAAQhD,MAAM,4CAA6CA,KCzEjEkD,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,UAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAnB,OAAMqC,UAAN,sBAEPzB,GAiDV,SAAiCO,GAE/BqB,MAAMrB,GACHvB,KAAK,SAAA6C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMlD,KAAK,SAAA2B,GACjCA,EAAawB,aAAanD,KAAK,WAC7BkB,OAAOC,SAASiC,aAKpB9B,EAAgBC,KAGnBlB,MAAM,WACL4B,QAAQC,IACN,mEArEAmB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMlD,KAAK,WACjCiC,QAAQC,IACN,+GAMJZ,EAAgBC,MCzCxB+B","file":"static/js/main.b05be7ca.chunk.js","sourcesContent":["/* global RSSParser */\nimport 'rss-parser/dist/rss-parser.min.js'\n\nlet rssParser\nexport const getRSSParser = _ =>\n  !!rssParser ? rssParser : (rssParser = new RSSParser())\n","import React, { Component } from 'react'\n\nimport './Header.css'\n\nclass Header extends Component {\n  state = {\n    rssUrlValue: '',\n  }\n\n  onAddPodcastSubmit = event => {\n    event.preventDefault()\n    this.props.addPodcast(this.state.rssUrlValue)\n    this.setState({ rssUrlValue: '' })\n  }\n\n  handleRSSValueChange = event => {\n    this.setState({ rssUrlValue: event.target.value })\n  }\n\n  render() {\n    return (\n      <header>\n        <h1>{this.props.title}</h1>\n        <div className=\"add-podcast\">\n          <input\n            placeholder=\"Add RSS Feed\"\n            type=\"text\"\n            value={this.state.rssUrlValue}\n            onChange={this.handleRSSValueChange}\n          />\n          <button\n            type=\"button\"\n            onClick={this.onAddPodcastSubmit}\n            disabled={!this.state.rssUrlValue}\n          >\n            +\n          </button>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header\n","import { toast } from 'react-toastify'\n\nconst TOP_CENTER_POSITION = {\n  position: toast.POSITION.TOP_CENTER,\n}\n\nexport const notify = msg => toast(msg, TOP_CENTER_POSITION)\nexport const notifySuccess = msg => toast.success(msg, TOP_CENTER_POSITION)\nexport const notifyError = msg => toast.error(msg, TOP_CENTER_POSITION)\nexport const notifyInfo = msg => toast.info(msg, TOP_CENTER_POSITION)\nexport const notifyWarn = msg => toast.warn(msg, TOP_CENTER_POSITION)\n","import React, { Fragment } from 'react'\nimport { notify, notifyError } from '../../utils/toastNotifs'\nimport { getRSSParser } from '../../utils/rssParser'\n\nclass Library extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      podcastFeeds: [],\n    }\n  }\n\n  componentDidUpdate = prevProps => {\n    if (this.props.rssUrl !== prevProps.rssUrl) {\n      this.addPodcastRSSFeedFromUrl(this.props.rssUrl)\n    }\n  }\n\n  addPodcastRSSFeedFromUrl = rssUrl => {\n    getRSSParser()\n      .parseURL(rssUrl)\n      .then(feed => {\n        this.setState({ podcastFeeds: [...this.state.podcastFeeds, feed] })\n        notify('Successfully added the podcast to Library')\n      })\n      .catch(_ => notifyError('The URL seems to be wrong!'))\n  }\n\n  render() {\n    return <Fragment>{this.props.heading}</Fragment>\n  }\n}\n\nexport default Library\n","import React, { Component, Fragment } from 'react'\nimport { ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.min.css'\n\nimport Header from './Header/Header'\nimport Library from './Library/Library'\nimport './App.css'\n\nclass App extends Component {\n  state = {\n    lastRSSUrl: '',\n  }\n\n  setLastRSSUrl = url => {\n    this.setState({ lastRSSUrl: url })\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Header title=\"Pidpod\" addPodcast={this.setLastRSSUrl} />\n        <Library heading=\"My Podcasts\" rssUrl={this.state.lastRSSUrl} />\n        <ToastContainer />\n      </Fragment>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './components/App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}